# Generated by Django 2.2.4 on 2019-10-23 13:39

from django.db import migrations, models
import django_db_cascade.deletions
import django_db_cascade.fields


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0063_populate_disease'),
    ]

    # noinspection SqlWithoutWhere
    operations = [
        # ------------------------------------------------------------------------------------------
        # --- move sample's old disease_id reference to the new field disease_in_svip_id
        # ------------------------------------------------------------------------------------------
        migrations.AddField(
            model_name='sample',
            name='disease_in_svip',
            field=django_db_cascade.fields.ForeignKey(null=True, on_delete=django_db_cascade.deletions.DB_CASCADE,
                to='api.DiseaseInSVIP'),
            preserve_default=False,
        ),
        migrations.RunSQL(
            sql="""update svip_sample set disease_in_svip_id=disease_id""",
            reverse_sql="""update svip_sample set disease_id=disease_in_svip_id"""
        ),
        migrations.AlterField(
            model_name='sample',
            name='disease_in_svip',
            field=django_db_cascade.fields.ForeignKey(null=False, on_delete=django_db_cascade.deletions.DB_CASCADE,
                to='api.DiseaseInSVIP'),
            preserve_default=False,
        ),
        # clean up the old field now
        migrations.RemoveField(
            model_name='sample',
            name='disease',
        ),

        # ------------------------------------------------------------------------------------------
        # --- move disease's name out of diseaseinsvip, replacing it with a reference to Disease
        # ------------------------------------------------------------------------------------------
        migrations.AddField(
            model_name='diseaseinsvip',
            name='disease',
            field=django_db_cascade.fields.ForeignKey(null=True, on_delete=django_db_cascade.deletions.DB_CASCADE,
                to='api.Disease'),
        ),
        migrations.RunSQL(
            sql="""update svip_diseaseinsvip DSVIP set disease_id=(select id from api_disease AD where AD.name=DSVIP.name)""",
            reverse_sql="""update svip_diseaseinsvip set name=(select name from api_disease AD where AD.id=DSVIP.disease_in_svip_id)"""
        ),
        migrations.RemoveField(
            model_name='diseaseinsvip',
            name='name',
        ),

        # ------------------------------------------------------------------------------------------
        # --- establish relationship between curation entries and variants + diseases
        # --- link up references via the disease_in_svip column
        # ------------------------------------------------------------------------------------------
        migrations.AddField(
            model_name='curationentry',
            name='variant',
            field=django_db_cascade.fields.ForeignKey(null=True, on_delete=django_db_cascade.deletions.DB_CASCADE, to='api.Variant'),
        ),
        # move 'disease' into a temporary column 'disease_in_svip' so we can reference it during relinking
        migrations.RenameField(
            model_name='curationentry', old_name='disease', new_name='disease_in_svip'
        ),
        migrations.AddField(
            model_name='curationentry',
            name='disease',
            field=django_db_cascade.fields.ForeignKey(null=True, on_delete=django_db_cascade.deletions.DB_CASCADE, to='api.Disease'),
        ),
        migrations.RunSQL(
            sql="""
            -- unpack disease, variant references from svip_diseaseinsvip's references
            update svip_curationentry CE set
            disease_id=(
                select disease_id from svip_diseaseinsvip
                where id=CE.disease_in_svip_id
            ),
            variant_id=(
                select SV.variant_id from api_variantinsvip SV
                inner join svip_diseaseinsvip DIS on DIS.svip_variant_id=SV.id
                where DIS.id=CE.disease_in_svip_id
            )
            """,
            reverse_sql="""
            -- use disease, variant references to find unique svip_diseaseinsvip entry
            update svip_curationentry CE set
            disease_in_svip_id=(
                select DIS.id from svip_diseaseinsvip DIS
                inner join api_variantinsvip SV on SV.id=DIS.svip_variant_id
                inner join api_disease D on D.id=DIS.disease_id
                where SV.variant_id=CE.variant_id and D.id=CE.disease_id
            )
            """
        ),
        # clean up after ourselves
        migrations.RemoveField(
            model_name='curationentry', name='disease_in_svip'
        )
    ]
