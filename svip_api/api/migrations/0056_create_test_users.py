# Generated by Django 2.1.3 on 2019-06-07 14:16

from django.db import migrations, IntegrityError, transaction
from django.db.migrations import RunPython
from django.contrib.auth.hashers import make_password

TEST_USERS = {
    'test_clinician': {'groups': ['clinicians']},
    'test_curator': {'groups': ['curators']},
    'test_allroles': {'groups': ['clinicians', 'curators']}
}


def create_test_users(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    Group = apps.get_model('auth', 'Group')

    for username, v in TEST_USERS.items():
        try:
            with transaction.atomic():
                u = User(
                    username=username, email='%s@nowhere.net' % username,
                    password=make_password('testpassword')
                )
                u.save()
                u.groups.set([g for g in Group.objects.filter(name__in=v['groups'])])
        except IntegrityError:
            print("User %s already exists, skipping" % username)
            continue


def drop_test_users(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    User.objects.filter(username__in=TEST_USERS.keys()).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0055_create_groups_data'),
    ]

    operations = [
        RunPython(create_test_users, reverse_code=drop_test_users)
    ]
